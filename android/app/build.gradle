apply plugin: "com.android.application"
apply plugin: "kotlin-android"
apply plugin: "com.facebook.react"

import com.android.build.OutputFile

/**
 * This is the React Native configuration block
 */
project.ext.react = [
    enableHermes: false,  // clean and rebuild if changing
    nodeExecutableAndArgs: [System.getenv("NODE_BINARY") ?: "node"],
    cliPath: "../../node_modules/react-native/cli.js",
    bundleInRelease: true,
    bundleInDebug: false
]

/**
 * Set this to true to create four separate APKs instead of one:
 *   - An APK that only works on ARM devices
 *   - An APK that only works on ARM64 devices
 *   - An APK that only works on x86 devices
 *   - An APK that only works on x86_64 devices
 * The advantage is the size of the APK is reduced by about 4MB.
 * Upload all the APKs to the Play Store and people will download
 * the correct one based on the CPU architecture of their device.
 */
def enableSeparateBuildPerCPUArchitecture = false

/**
 * Run Proguard to shrink the Java bytecode in release builds.
 */
def enableProguardInReleaseBuilds = false

/**
 * The preferred build flavor of JavaScriptCore.
 *
 * For example, to use the international variant, you can use:
 * `def jscFlavor = 'org.webkit:android-jsc-intl:+'`
 *
 * The international variant includes ICU i18n library and necessary data
 * allowing to use e.g. `Date.toLocaleString` and `String.localeCompare` that
 * give correct results when using with locales other than en-US.  Note that
 * this variant is about 6MiB larger per architecture than default.
 */
def jscFlavor = 'org.webkit:android-jsc:+'

/**
 * Whether to enable the Hermes VM.
 *
 * This should be set on project.ext.react and mirrored here.  If it is not set
 * on project.ext.react, JavaScript will not be compiled to Hermes Bytecode
 * and the benefits of using Hermes will therefore be sharply reduced.
 */
def enableHermes = project.ext.react.get("enableHermes", false);

android {
    ndkVersion rootProject.ext.ndkVersion

    compileSdkVersion rootProject.ext.compileSdkVersion
    
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    // Add resolution strategy to handle duplicate classes
    configurations.all {
        resolutionStrategy {
            force 'com.facebook.fbjni:fbjni:0.3.0'
            exclude group: 'com.facebook.fbjni', module: 'fbjni-java-only'
        }
    }

    // Handle duplicate native libraries
    packagingOptions {
        pickFirst '**/libc++_shared.so'
        pickFirst '**/libfbjni.so'
        pickFirst '**/libreactnativejni.so'
    }

    defaultConfig {
        applicationId "com.improvement_roll"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 12
        versionName "1.4.0"
    }
    splits {
        abi {
            reset()
            enable enableSeparateBuildPerCPUArchitecture
            universalApk false  // If true, also generate a universal APK
            include "armeabi-v7a", "x86", "arm64-v8a", "x86_64"
        }
    }
    signingConfigs {
        debug {
            storeFile file('debug.keystore')
            storePassword 'android'
            keyAlias 'androiddebugkey'
            keyPassword 'android'
        }
    }
    buildTypes {
        debug {
            signingConfig signingConfigs.debug
        }
        release {
            // Caution! In production, you need to generate your own keystore file.
            // see https://reactnative.dev/docs/signed-apk-android.
            signingConfig signingConfigs.debug
            // Re-enable minification with our robust ProGuard rules
            minifyEnabled true
            proguardFiles getDefaultProguardFile("proguard-android.txt"), "proguard-rules.pro"
            
            // Ensure JavaScript bundle works in release builds
            matchingFallbacks = ['release', 'debug']
        }
    }

    // applicationVariants are e.g. debug, release
    applicationVariants.all { variant ->
        variant.outputs.each { output ->
            // For each separate APK per architecture, set a unique version code as described here:
            // https://developer.android.com/studio/build/configure-apk-splits.html
            def versionCodes = ["armeabi-v7a": 1, "x86": 2, "arm64-v8a": 3, "x86_64": 4]
            def abi = output.getFilter(OutputFile.ABI)
            if (abi != null) {  // null for the universal-debug, universal-release variants
                output.versionCodeOverride =
                        versionCodes.get(abi) * 1048576 + defaultConfig.versionCode
            }
        }
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])

    //noinspection GradleDynamicVersion
    implementation "com.facebook.react:react-native:+"  // From node_modules
    implementation "com.facebook.fbjni:fbjni:0.3.0"  // Add explicit FBJNI dependency
    implementation "com.facebook.fbjni:fbjni-java-only:0.2.2"  // Add Java-only version as backup

    implementation "androidx.swiperefreshlayout:swiperefreshlayout:1.0.0"

    // Custom dependencies
    implementation "androidx.work:work-runtime:2.7.1"
    implementation(project(':react-native-device-info')) {
        exclude group: 'com.google.firebase'
        exclude group: 'com.google.android.gms'
        exclude group: 'com.android.installreferrer'
    }
    implementation project(':react-native-file-picker')
    implementation project(':react-native-fs')

    debugImplementation("com.facebook.flipper:flipper:${FLIPPER_VERSION}")
    debugImplementation("com.facebook.flipper:flipper-network-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }
    debugImplementation("com.facebook.flipper:flipper-fresco-plugin:${FLIPPER_VERSION}") {
        exclude group:'com.facebook.flipper'
    }

    if (enableHermes) {
        def hermesPath = "../../node_modules/hermes-engine/android/";
        debugImplementation files(hermesPath + "hermes-debug.aar")
        releaseImplementation files(hermesPath + "hermes-release.aar")
    } else {
        implementation jscFlavor
    }
}

// Run this once to be able to run the application with BUCK
// puts all compile dependencies into folder libs for BUCK to use
task copyDownloadableDepsToLibs(type: Copy) {
    from configurations.implementation
    into 'libs'
}

apply from: file("../../node_modules/@react-native-community/cli-platform-android/native_modules.gradle"); applyNativeModulesAppBuildGradle(project)

// Explicitly ensure JS bundle is created for release builds
project.afterEvaluate {
    if (project.hasProperty("bundleReleaseJsAndAssets")) {
        android.buildTypes.release.packageApplication.dependsOn(bundleReleaseJsAndAssets)
    }
}

// Force disable Codegen tasks that try to run Yarn commands
tasks.whenTaskAdded { task ->
    if (task.name.contains('generateCodegen') || task.name.contains('Codegen')) {
        task.enabled = false
        task.dependsOn = []
    }
}
